package org.sqldroid;

import java.io.File;
import java.lang.reflect.Constructor;
import java.sql.Array;
import java.sql.Blob;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.NClob;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLClientInfoException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLWarning;
import java.sql.SQLXML;
import java.sql.Savepoint;
import java.sql.Statement;
import java.sql.Struct;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.Executor;

public class SQLDroidConnection implements Connection {

    /**
    * A map from a connection to a SQLiteDatabase instance.
    * Used to track the use of each instance, and close the database when last conneciton is closed.
    */
    private static final Map<SQLDroidConnection, SQLiteDatabase> clientMap =
            new HashMap<SQLDroidConnection, SQLiteDatabase>();

    /** The Android sqlitedb. */
    private SQLiteDatabase sqlitedb;

    private boolean autoCommit = true;

    /** Will have the value 9 or greater the version of SQLException has the constructor:
     * SQLException(Throwable theCause) otherwise false.
     * API levels 9 or greater have this constructor.
     * If the value is positive and less than 9 then the SQLException does not have the constructor.
     * If the value is &lt; 0 then the capabilities of SQLException have not been determined.
     */
    protected static int sqlThrowable = -1;

    /**
     * A cached prepare statement for the count of changed rows
     */
    private PreparedStatement changedRowsCountStatement = null;

	/**
	 * A cached prepare statement for the last row id generated by the database
	 */
	private PreparedStatement generatedRowIdStatement = null;

    private final String url;

    private int transactionIsolation = TRANSACTION_SERIALIZABLE;

    /** Connect to the database with the given url and properties.
     *
     * @param url the URL string, typically something like
     * "jdbc:sqlite:/data/data/your-package/databasefilename" so for example:
     *  "jdbc:sqlite:/data/data/org.sqldroid.examples/databases/sqlite.db"
     * @param info Properties object with options.  Supported options are "timeout", "retry", and "shared".
     */
    public SQLDroidConnection(String url, Properties info) throws SQLException {
        Log.v("SQLDroidConnection: " + Thread.currentThread().getId() + " \"" + Thread.currentThread().getName() + "\" " + this);
        Log.v("New sqlite jdbc from url '" + url + "', " + "'" + info + "'");

        this.url = url;
        // Make a filename from url
        String dbQname;
        if(url.startsWith(SQLDroidDriver.xerialPrefix)) {
            dbQname = url.substring(SQLDroidDriver.xerialPrefix.length());
        } else {
            // there does not seem to be any possibility of error handling.
            // So we could check that the url starts with SQLDroidDriver.sqldroidPrefix
            // but if it doesn't there's nothing we can do (no Exception is specified)
            // so it has to be assumed that the URL is valid when passed to this method.
            dbQname = url.substring(SQLDroidDriver.sqldroidPrefix.length());
        }
        long timeout = 0;  // default to no retries to be consistent with other JDBC implemenations.
        long retryInterval = 50; // this was 1000 in the original code.  1 second is too long for each loop.
        int queryPart = dbQname.indexOf('?');

        // if there's a query part, we accept "timeout=xxx" and "retry=yyy"
        if ( queryPart > 0 ) {
            dbQname = dbQname.substring(0, queryPart);
            String options = dbQname.substring(queryPart);
            while (options.length() > 0) {
                int optionEnd = options.indexOf('&');
                if (optionEnd == -1) {
                    optionEnd = options.length();
                }
                int equals = options.lastIndexOf('=', optionEnd);
                String optionName = options.substring(0, equals).trim();
                String optionValueString = options.substring(equals+1, optionEnd).trim();
                long optionValue;
                try {
                    optionValue = Long.parseLong(optionValueString);
                    if (optionName.equals("timeout")) {
                        timeout = optionValue;
                    } else if (optionName.equals("retry")) {
                        timeout = optionValue;
                        retryInterval = optionValue;
                    }
                    Log.v("Timeout: " + timeout);
                } catch ( NumberFormatException nfe ) {
                    // print and ignore
                    Log.e("Error Parsing URL \"" + url + "\" Timeout String \"" + optionValueString + "\" is not a valid long", nfe);
                }
                options = options.substring(optionEnd + 1);
            }
        }
        Log.v("opening database " + dbQname);
        ensureDbFileCreation(dbQname);
        int flags = android.database.sqlite.SQLiteDatabase.CREATE_IF_NECESSARY
                | android.database.sqlite.SQLiteDatabase.OPEN_READWRITE
                | android.database.sqlite.SQLiteDatabase.NO_LOCALIZED_COLLATORS;
        if ( info != null ) {
            if ( info.getProperty(SQLDroidDriver.DATABASE_FLAGS) != null ) {

                try {
                    flags = Integer.parseInt(info.getProperty(SQLDroidDriver.DATABASE_FLAGS));
                } catch ( NumberFormatException nfe ) {
                    Log.e("Error Parsing DatabaseFlags \"" + info.getProperty(SQLDroidDriver.DATABASE_FLAGS) + " not a number ", nfe);
                }
            } else if ( info.getProperty(SQLDroidDriver.ADDITONAL_DATABASE_FLAGS) != null ) {
                try {
                    int extraFlags = Integer.parseInt(info.getProperty(SQLDroidDriver.ADDITONAL_DATABASE_FLAGS));
                    flags |= extraFlags;
                } catch ( NumberFormatException nfe ) {
                    Log.e("Error Parsing DatabaseFlags \"" + info.getProperty(SQLDroidDriver.ADDITONAL_DATABASE_FLAGS) + " not a number ", nfe);
                }
            }
        }
        sqlitedb = new SQLiteDatabase(dbQname, timeout, retryInterval, flags);
        clientMap.put(this, sqlitedb);
    }

    private void ensureDbFileCreation(String dbQname) throws SQLException {
        File dbFile = new File(dbQname);
        if (dbFile.isDirectory()) {
            throw new SQLException("Can't create " + dbFile + " - it already exists as a directory");
        } else if (dbFile.getParentFile().exists() && !dbFile.getParentFile().isDirectory()) {
            throw new SQLException("Can't create " + dbFile + " - it because " + dbFile.getParent() + " exists as a regular file");
        } else if (!dbFile.getParentFile().exists()) {
            dbFile.getParentFile().mkdirs();
            if (!dbFile.getParentFile().isDirectory()) {
                throw new SQLException("Could not create " + dbFile.getParent() + " as parent directory for " + dbFile);
            }
        }
    }

    /** Returns the delegate SQLiteDatabase. */
    public SQLiteDatabase getDb() {
        return sqlitedb;
    }

    @Override
    public void clearWarnings() throws SQLException {
    }

    /** This will create and return an exception.  For API levels less than 9 this will return
     * a SQLDroidSQLException, for later APIs it will return a SQLException.
     */
    public static SQLException chainException(android.database.SQLException sqlException) {
        if ( sqlThrowable < 0 || sqlThrowable >= 9 ) {
            try {
                sqlThrowable = 9;
                //return new SQLException (sqlException);
                // creating by reflection is significantly slower, but since Exceptions should be unusual
                // this should not be a performance issue.
                final Constructor<?> c = SQLException.class.getDeclaredConstructor(new Class[] {Throwable.class});
                return (SQLException)c.newInstance(new Object[]{sqlException});
            } catch ( Exception e) {
                sqlThrowable = 1;
            }
        }
        // if the code above worked correctly, then the exception will have been returned.  Otherwise, we need
        // to go through this clause and create a SQLDroidSQLException
        try {
            // avoid a direct reference to the sqldroidSQLException so that app > API level 9 do not need that class.
            final Constructor<?> c = SQLDroidConnection.class.getClassLoader().loadClass("org.sqldroid.SQLDroidSQLException").getDeclaredConstructor(new Class[] {android.database.SQLException.class});
            // SQLDroidSQLException is an instance of (direct subclass of) SQLException, so the cast below is correct although
            // the instance created will always be a SQLDroidSQLException
            return (SQLException)c.newInstance(new Object[]{sqlException});
        } catch (Exception e) {
            return new SQLException ("Unable to Chain SQLException " + sqlException.getMessage());
        }
    }

    @Override
    public void close() throws SQLException {
        Log.v("SQLDroidConnection.close(): " + Thread.currentThread().getId() + " \"" + Thread.currentThread().getName() + "\" " + this);
        if (sqlitedb != null) {
                clientMap.remove(this);
                if (!clientMap.containsValue(sqlitedb)) {
                    Log.i("SQLDroidConnection.close(): " + Thread.currentThread().getId() + " \"" + Thread.currentThread().getName() + "\" " + this + " Closing the database since since last connection was closed.");
                    setAutoCommit(true);
                    sqlitedb.close();
            }
            sqlitedb = null;
        } else {
            Log.e("SQLDroidConnection.close(): " + Thread.currentThread().getId() + " \"" + Thread.currentThread().getName() + "\" " + this + " Duplicate close!");
        }
    }

    @Override
    public void commit() throws SQLException {
        if (autoCommit) {
            throw new SQLException("database in auto-commit mode");
        }
        sqlitedb.setTransactionSuccessful();
        Log.d("END TRANSACTION  (commit) " + Thread.currentThread().getId() + " \"" + Thread.currentThread().getName() + "\" " + this);
        sqlitedb.endTransaction();
        Log.d("BEGIN TRANSACTION (after commit) " + Thread.currentThread().getId() + " \"" + Thread.currentThread().getName() + "\" " + this);
        sqlitedb.beginTransaction();
    }

    @Override
    public Statement createStatement() throws SQLException {
        return new SQLDroidStatement(this);
    }

    @Override
    public Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException {
      return createStatement(resultSetType, resultSetConcurrency, ResultSet.CLOSE_CURSORS_AT_COMMIT);
    }

    @Override
    public Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
      if (resultSetType != ResultSet.TYPE_FORWARD_ONLY) {
        throw new SQLFeatureNotSupportedException("createStatement supported with TYPE_FORWARD_ONLY");
      }
      if (resultSetConcurrency != ResultSet.CONCUR_READ_ONLY) {
        throw new SQLFeatureNotSupportedException("createStatement supported with CONCUR_READ_ONLY");
      }
      if (resultSetHoldability != ResultSet.CLOSE_CURSORS_AT_COMMIT) {
        throw new SQLFeatureNotSupportedException("createStatement supported with CLOSE_CURSORS_AT_COMMIT");
      }
      return createStatement();
    }

    @Override
    public boolean getAutoCommit() throws SQLException {
        return autoCommit;
    }

    @Override
    public String getCatalog() throws SQLException {
        return null;
    }

    @Override
    public int getHoldability() throws SQLException {
      return ResultSet.CLOSE_CURSORS_AT_COMMIT;
    }

    @Override
    public DatabaseMetaData getMetaData() throws SQLException {
        return new SQLDroidDatabaseMetaData(this);
    }

    @Override
    public int getTransactionIsolation() throws SQLException {
        return transactionIsolation;
    }

    @Override
    public Map<String, Class<?>> getTypeMap() throws SQLException {
      throw new SQLFeatureNotSupportedException("getTypeMap not supported");
    }

    @Override
    public SQLWarning getWarnings() throws SQLException {
        // TODO: Is this a sufficient implementation? (If so, delete comment and logging)
        Log.e(" ********************* not implemented @ " + DebugPrinter.getFileName() + " line "
                + DebugPrinter.getLineNumber());
        return null;
    }

    @Override
    public boolean isClosed() throws SQLException {
        // assuming that "isOpen" doesn't throw a locked exception..
        return sqlitedb == null || sqlitedb.getSqliteDatabase() == null ||
                !sqlitedb.getSqliteDatabase().isOpen();
    }

    @Override
    public boolean isReadOnly() throws SQLException {
        return false;
    }

    @Override
    public String nativeSQL(String sql) throws SQLException {
      return sql;
    }

    @Override
    public CallableStatement prepareCall(String sql) throws SQLException {
        return prepareCall(sql, ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY,
            ResultSet.CLOSE_CURSORS_AT_COMMIT);
    }

    @Override
    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
        return prepareCall(sql, resultSetType, resultSetConcurrency,
            ResultSet.CLOSE_CURSORS_AT_COMMIT);
    }

    @Override
    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency,
            int resultSetHoldability) throws SQLException {
      throw new SQLFeatureNotSupportedException("prepareCall not supported");
    }

    @Override
    public PreparedStatement prepareStatement(String sql) throws SQLException {
        return prepareStatement(sql, PreparedStatement.NO_GENERATED_KEYS);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
        return new SQLDroidPreparedStatement(sql, this, autoGeneratedKeys);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
        throw new SQLFeatureNotSupportedException("prepareStatement(String,int[]) not supported");
    }

    @Override
    public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
        throw new SQLFeatureNotSupportedException("prepareStatement(String,String[]) not supported");
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
        return prepareStatement(sql, resultSetType, resultSetConcurrency, ResultSet.CLOSE_CURSORS_AT_COMMIT);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
      if (resultSetType != ResultSet.TYPE_FORWARD_ONLY) {
        throw new SQLFeatureNotSupportedException("createStatement supported with TYPE_FORWARD_ONLY");
      }
      if (resultSetConcurrency != ResultSet.CONCUR_READ_ONLY) {
        throw new SQLFeatureNotSupportedException("createStatement supported with CONCUR_READ_ONLY");
      }
      if (resultSetHoldability != ResultSet.CLOSE_CURSORS_AT_COMMIT) {
        throw new SQLFeatureNotSupportedException("createStatement supported with CLOSE_CURSORS_AT_COMMIT");
      }
      return prepareStatement(sql);
    }

    @Override
    public void releaseSavepoint(Savepoint savepoint) throws SQLException {
      // TODO: Implemented in Xerial as db.exec(String.format("RELEASE SAVEPOINT %s", savepoint.getSavepointName()));
      throw new SQLFeatureNotSupportedException("releaseSavepoint not supported");
    }

    @Override
    public void rollback() throws SQLException {
        if (autoCommit) {
            throw new SQLException("database in auto-commit mode");
        }
        Log.d("END TRANSACTION (rollback) " + Thread.currentThread().getId() + " \"" + Thread.currentThread().getName() + "\" " + this);
        sqlitedb.endTransaction();
        Log.d("BEGIN TRANSACTION (after rollback) " + Thread.currentThread().getId() + " \"" + Thread.currentThread().getName() + "\" " + this);
        sqlitedb.beginTransaction();
    }

    @Override
    public void rollback(Savepoint savepoint) throws SQLException {
      // TODO: Implemented in Xerial as db.exec(String.format("ROLLBACK TO SAVEPOINT %s", savepoint.getSavepointName()));
      throw new SQLFeatureNotSupportedException("rollback not supported");
    }

    @Override
    public void setAutoCommit(boolean autoCommit) throws SQLException {
        if (this.autoCommit == autoCommit) {
            return;
        }
        this.autoCommit = autoCommit;
        if (autoCommit) {
            if (sqlitedb.inTransaction()) { // to be on safe side.
                sqlitedb.setTransactionSuccessful();
                Log.d("END TRANSACTION (autocommit on) " + Thread.currentThread().getId() + " \"" + Thread.currentThread().getName() + "\" " + this);
                sqlitedb.endTransaction();
            }
        } else {
            Log.d("BEGIN TRANSACTION (autocommit off) " + Thread.currentThread().getId() + " \"" + Thread.currentThread().getName() + "\" " + this);
            sqlitedb.beginTransaction();
        }
    }

    @Override
    public void setCatalog(String catalog) throws SQLException {
      // From spec:
      // If the driver does not support catalogs, it will silently ignore this request.
    }

    @Override
    public void setHoldability(int holdability) throws SQLException {
      if (holdability != ResultSet.CLOSE_CURSORS_AT_COMMIT)
        throw new SQLException("SQLDroid only supports CLOSE_CURSORS_AT_COMMIT");
    }

    @Override
    public void setReadOnly(boolean readOnly) throws SQLException {
        if (readOnly != isReadOnly()) {
            throw new SQLException("Cannot change read-only flag after establishing a connection");
        }
    }

    @Override
    public Savepoint setSavepoint() throws SQLException {
      // TODO: In Xerial: db.exec(String.format("SAVEPOINT %s", sp.getSavepointName()))
      throw new SQLFeatureNotSupportedException("setSavepoint not supported");
    }

    @Override
    public Savepoint setSavepoint(String name) throws SQLException {
      throw new SQLFeatureNotSupportedException("setSavepoint not supported");
    }

    @Override
    public void setTransactionIsolation(int level) throws SQLException {
        // TODO: Xerial implements this with PRAGMA read_uncommitted
        if (level != TRANSACTION_SERIALIZABLE) {
          throw new SQLException("SQLDroid supports only TRANSACTION_SERIALIZABLE.");
        }
        transactionIsolation = level;
    }

    @Override
    public void setTypeMap(Map<String, Class<?>> arg0) throws SQLException {
      throw new SQLFeatureNotSupportedException("setTypeMap not supported");
    }

    @Override
    protected void finalize() throws Throwable {
        Log.v(" --- Finalize SQLDroid.");
        if (!isClosed()) {
            close();
        }
        super.finalize();
    }

    @Override
    public boolean isWrapperFor(Class<?> iface) throws SQLException {
      return iface != null && iface.isAssignableFrom(getClass());
    }

    @Override
    public <T> T unwrap(Class<T> iface) throws SQLException {
      if (isWrapperFor(iface)) {
        return (T) this;
      }
      throw new SQLException(getClass() + " does not wrap " + iface);
    }

    @Override
    public Array createArrayOf(String typeName, Object[] elements) throws SQLException {
      throw new SQLFeatureNotSupportedException("createArrayOf not supported");
    }

    @Override
    public Blob createBlob() throws SQLException {
      // TODO: Can return new SQLDroidBlob(new byte[0]) once setBytes is implemented
      throw new SQLFeatureNotSupportedException("createBlob not supported");
    }

    @Override
    public SQLDroidClob createClob() throws SQLException {
      // TODO: Can return new SQLDroidClob("") once setString is implemented
      throw new SQLFeatureNotSupportedException("createClob not supported");
    }

    @Override
    public NClob createNClob() throws SQLException {
        return createClob();
    }

    @Override
    public SQLXML createSQLXML() throws SQLException {
      throw new SQLFeatureNotSupportedException("createSQLXML not supported");
    }

    @Override
    public Struct createStruct(String typeName, Object[] attributes) throws SQLException {
      throw new SQLFeatureNotSupportedException("createStruct not supported");
    }

    @Override
    public Properties getClientInfo() throws SQLException {
        // TODO Evaluate if this is a sufficient implementation (if so, remove this comment)
        return new Properties();
    }

    @Override
    public String getClientInfo(String name) throws SQLException {
        // TODO Evaluate if this is a sufficient implementation (if so, remove this comment)
        return null;
    }

    @Override
    public boolean isValid(int timeout) throws SQLException {
        // TODO createStatement().execute("select 1");
        return true;
    }

    @Override
    public void setClientInfo(Properties properties) throws SQLClientInfoException {
        // TODO Evaluate if this is a sufficient implementation (if so, remove this comment)
    }

    @Override
    public void setClientInfo(String name, String value) throws SQLClientInfoException {
        // TODO Evaluate if this is a sufficient implementation (if so, remove this comment)
    }

    /**
     * @return Where the database is located.
     */
    public String url() {
        return url;
    }

    // methods added for JDK7 compilation

    public void setNetworkTimeout(Executor executor, int milliseconds) throws SQLException {
        throw new SQLFeatureNotSupportedException("setNetworkTimeout not supported");
    }

    public int getNetworkTimeout() throws SQLException {
        throw new SQLFeatureNotSupportedException("getNetworkTimeout not supported");
    }

    public void abort(Executor executor) throws SQLException {
      close();
    }

    public String getSchema() throws SQLException {
        return null;
    }

    public void setSchema(String schema) throws SQLException {
    }

	/**
	 * @return The number of database rows that were changed or inserted or deleted
	 * by the most recently completed INSERT, DELETE, or UPDATE statement.
	 */
	public int changedRowsCount() {
		int changedRows = -1;
		try {
			changedRowsCountStatement = getChangedRowsCountStatement();
			ResultSet changedRowsCountResultSet = changedRowsCountStatement.executeQuery();
			if (changedRowsCountResultSet != null && changedRowsCountResultSet.first()) {
				changedRows = (int) changedRowsCountResultSet.getLong(1);
				// System.out.println("In SQLDroidConnection.changedRowsCount(), changedRows=" + changedRows);
			}
			changedRowsCountResultSet.close();
		} catch (SQLException e) {
			// ignore
		}
		return changedRows;
	}

	/**
	 * @return A cached prepare statement for the last row id generated
	 * by the database when executing an INSERT statement or create a
	 * new prepare statement and then return that.
	 *
	 * @throws SQLException
	 */
	public ResultSet getGeneratedRowIdResultSet() throws SQLException {
	    if (generatedRowIdStatement == null) {
	    	generatedRowIdStatement = prepareStatement("select last_insert_rowid();");
	    }

	    return generatedRowIdStatement.executeQuery();
	}

    /**
     * @return A cached prepare statement for the count of changed rows or create one and return that.
     *
     * @throws SQLException
     */
    private PreparedStatement getChangedRowsCountStatement() throws SQLException {
        if (changedRowsCountStatement == null) {
      	  changedRowsCountStatement = prepareStatement("select changes();");
        }

        return changedRowsCountStatement;
    }
}
